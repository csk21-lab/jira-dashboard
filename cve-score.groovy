import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.riadalabs.jira.plugins.insight.services.model.ObjectAttributeBean
import com.riadalabs.jira.plugins.insight.services.model.ObjectTypeAttributeBean
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue

// Get the necessary managers
def customFieldManager = ComponentAccessor.getCustomFieldManager()
def issueManager = ComponentAccessor.getIssueManager()

// Define the severity order
def cveScoreOrder = ['1.0'] + (1..9).collect { "1.${it}" } + (2..9).collect { "2.${it}" } + (3..9).collect { "3.${it}" } + (4..9).collect { "4.${it}" } + (5..9).collect { "5.${it}" } + (6..9).collect { "6.${it}" } + (7..9).collect { "7.${it}" } + (8..9).collect { "8.${it}" } + (9..9).collect { "9.${it}" } + ["10.0"]

// Function to get the highest severity value from asset objects
def getHighestCveScore(assetObjects, cveScoreOrder) {
    def highestCveScore = '1.0' // Default to the lowest severity
    log.warn("Starting CVE Score evaluation... : ${assetObjects} ")
    def severityList = []
    assetObjects.each { asset ->
        def vulAsset = Assets.getByKey(asset?.objectKey)
        def severityValue = vulAsset.getAttributeValues('CVSS Version3 BaseScore')?.value?.toString() // Adjusted to correctly access the value
        log.warn("vulAsset : ${vulAsset}-${severityValue}")
        if (severityValue) {
            severityList.add(severityValue) // Add value to the list if not null
        }
    }

    // Determine the highest severity score from the list
    for (score in cveScoreOrder) {
        if (severityList.contains(score)) {
            highestCveScore = score
            break
        }
    }

    log.warn("Final highest CVE SCORE: ${highestCveScore}")
    return highestCveScore
}

def issue = issueManager.getIssueObject("XYZ-121") // Replace with the actual issue key or method to get the issue

if (issue.issueType.name == 'Vulnerability Asset') {
    // Get the current issue (use the appropriate method to get the issue in your context)

    // Get the custom field objects
    def assetField = customFieldManager.getCustomFieldObjectByName("Vulnerability Details") // Corrected method name

    if (assetField) {
        log.warn("Custom fields found: 'V asset' and 'Severity'")
        def assetObjects = issue.getCustomFieldValue(assetField) as List

        if (assetObjects) {
            log.warn("Asset objects found: ${assetObjects.size()}")
            // Get the highest severity value from the asset objects
            def highestSeverity = getHighestCveScore(assetObjects, cveScoreOrder)

            // Update the issue with the highest CVE score
            def cveScoreField = customFieldManager.getCustomFieldObjectByName("CVE Score") // Ensure this field exists
            if (cveScoreField) {
                issue.setCustomFieldValue(cveScoreField, highestSeverity)
                issueManager.updateIssue(ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser(), issue, EventDispatchOption.ISSUE_UPDATED, false)
                log.warn("CVE Score field updated to ${highestSeverity} for issue ${issue.key}")
            } else {
                log.error("Custom field 'CVE Score' not found")
            }
        } else {
            log.warn("No asset objects found in 'V asset' field for issue ${issue.key}")
        }
    } else {
        log.error("Custom field 'V asset' not found")
    }
}

//////Updated Script

// Extended CVE Score Order with values from 1.0 to 10.0
def cveScoreOrder = (1..10).collect { (it / 10.0).toString().padRight(3, '0') }
cveScoreOrder.add('10.0')  // Ensure that 10.0 is included at the end
log.warn("Extended CVE Score Order: ${cveScoreOrder}")

// Function to get the highest CVE score from asset objects
def getHighestCveScore(assetObjects) {
    def highestCveScore = '1.0'  // Default to the lowest severity (1.0)
    log.warn("Starting CVE Score evaluation... : ${assetObjects}")
    
    def severityList = []
    assetObjects.each { asset ->
        def vulAsset = Assets.getByKey(asset?.objectKey)
        if (vulAsset) {
            def severityValue = vulAsset.getAttributeValues('CVSS Version3 BaseScore')
            if (severityValue) {
                // Log severity value for each asset
                log.warn("vulAsset: ${vulAsset} - CVE Score: ${severityValue}")
                severityList.add(severityValue)
            }
        }
    }

    // Find the highest severity score by comparing to cveScoreOrder
    severityList.each { severity ->
        if (cveScoreOrder.indexOf(severity) > cveScoreOrder.indexOf(highestCveScore)) {
            highestCveScore = severity
        }
    }

    log.warn("Final highest CVE Score: ${highestCveScore}")
    return highestCveScore
}

