import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.util.DefaultIssueChangeHolder
import com.riadalabs.jira.plugins.insight.services.model.ObjectAttributeBean
import com.riadalabs.jira.plugins.insight.services.model.ObjectTypeAttributeBean
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue

// Get the necessary managers
def customFieldManager = ComponentAccessor.getCustomFieldManager()
def issueManager = ComponentAccessor.getIssueManager()

// Define the severity order
def cveScoreOrder = (1..10).collect { it.toString() } + (0..9).collect { "1.${it}" } + (0..9).collect { "2.${it}" } + (0..9).collect { "3.${it}" } + (0..9).collect { "4.${it}" } + (0..9).collect { "5.${it}" } + (0..9).collect { "6.${it}" } + (0..9).collect { "7.${it}" } + (0..9).collect { "8.${it}" } + (0..9).collect { "9.${it}" } + ["10.0"]

// Function to get the highest severity value from asset objects
def getHighestCveScore(assetObjects) {
    def highestCveScore = '1.0' // Default to the lowest severity
    log.warn("Starting CVE Score evaluation... : ${assetObjects} ")
    def severityList = []
    assetObjects.each { asset ->
        def vulAsset = Assets.getByKey(asset?.objectKey)
        def severityValue = vulAsset.getAttributeValues('CVSS Version3 BaseScore') //getInteger('CVSS Version3 BaseScore')
        log.warn("vulAsset : ${vulAsset}-${severityValue.value[]}")
        severityList.add(severityValue)
    }

    // Determine the highest severity score from the list
    for (score in cveScoreOrder) {
        if (severityList.contains(score)) {
            highestCveScore = score
            break
        }
    }

    log.warn("Final highest CVE SCORE: ${highestCveScore}")
    return highestCveScore
}

def issue = issueManager.getIssueObject("XYZ-121") // Replace with the actual issue key or method to get the issue

if (issue.issueType.name == 'Vulnerability Asset') {
    // Get the current issue (use the appropriate method to get the issue in your context)

    // Get the custom field objects
    def assetField = customFieldManager.getCustomFieldObjectsByName("Vulnerability Details")

    if (assetField) {
        log.warn("Custom fields found: 'V asset' and 'Severity'")
        def assetObjects = issue.getCustomFieldValue(assetField) as List

        if (assetObjects) {
            log.warn("Asset objects found: ${assetObjects.size()}")
            // Get the highest severity value from the asset objects
            def highestSeverity = getHighestCveScore(assetObjects)
            issue.update {
                setCustomFieldValue('CVE Score', highestSeverity)
            }
            log.warn("CVE Score field updated to ${highestSeverity} for issue ${issue.key}")
        } else {
            log.warn("No asset objects found in 'V asset' field for issue ${issue.key}")
        }
    } else {
        log.error("Custom fields 'V asset' or 'CVE' not found")
    }
}
